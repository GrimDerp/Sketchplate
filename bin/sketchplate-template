#!/usr/bin/env node

require('colors');

var program = require('commander'),
	async = require('async'),
	path = require('path'),
	fs = require('fs'),
	sketchplate = require('../lib/sketchplate'),
	hooksCli = require('./hooks-cli'),
	config = require('../lib/config').getUserConfig(),
	plate;


program.option('-l, --list', 'List all sketchplate templates');


hooksCli.appendHelp(
	program
		.command('add [name]') 
)	.description('add a new template')
	.action(function( name, options ){

		var waterfall = [
			function collectName( next ){
				//if a name wasnt provided, ask for it
				if( name === undefined ){
					program.prompt("Name: ", function( _name ){
						name = _name;
						next();
					});
				} else {
					next();
				}
			},
			function collectDescription( next ){
				program.prompt("Description: ", function( description ){
					sketchplate.createTemplate( config, {
						name: name,
						description: description
					}, next);
				});
			}
		];

		hooksCli.addToWaterfall( options, waterfall );

		async.waterfall( waterfall, function( err ){
			if( err ){
				throw err;
			}
		});

	});


hooksCli.appendHelp(
	program
		.command('edit [name]')
)	.description('edit an existing template')
	.action(function( name, options ){
		var tmplDir = config.templatesPath;
		name = name || config.template;
		tmplDir += '/'+name;
		if( !fs.existsSync(tmplDir) ){
			throw Error("The template "+name+" does not exist");
		}
		
		var waterfall = [function( next ){
			next( null, tmplDir );
		}];
		hooksCli.addToWaterfall( options, waterfall );
		async.waterfall( waterfall, function( err ){
			if( err ){
				throw err;
			}
		});
	});

program
	.command('fetch [namesâ€¦]')
	.description('fetch resources for a template')
	.option('-a, --all', 'Fetch new copies of all resources for template')
	.option('-i, --interactive', 'Fetch resources individually in interactive mode')
	.option('-l, --list', 'List the template\'s fetch resources')
	.option('-t, --template [template]', 'Fetch resources for [template]', undefined)
	.action(function( options ){
		var names = [];
		Array.prototype.forEach.call( arguments, function( arg ){
			if( arg === undefined ){
				return ;
			}
			if( arg.options ){
				options = arg;
			} else {
				names.push( arg );
			}
		});
		//if the argument was an options object
		if(options.template){
			config.template = options.template;
		}
		var plate = sketchplate.create( config );
		if( options.list ){
			console.log("Template `"+plate.config.template+"` lists the following resources:");
			plate.resources.forEach(function( resource, i ){
				console.log((i+1)+') '+resource.id );
			});
		}
		var report = function( err ){
			if( err ){
				console.log( err.message );
			} else {
				console.log("Fetched resources completed");
			}
			process.exit();
		};
		//if all resources should be fetched
		if( options.all ){
			plate.fetchAll( report );
			return;
		}
		//otherwise, if it should be the interactive version
		if( options.interactive ){
			var list = [];
			plate.resources.forEach(function( val ){
				list.push( val.id );
			});
			program.choose( list, function( index ){
				var resource = plate.resources[index];
				sketchplate.fetch( resource, report );
			});
			return;
		}

		if( names.length > 0 ){
			//if the arguments were individual resources to fetch
			console.log("Names: ", names);
			plate.fetch( names, function( err ){
				if( err ){
					console.log( 'sketchplate err: ',err );
				} else {
					console.log("Fetched resources completed");
				}
			});
			return;
		}
		//fetch only missing
		plate.fetchMissing( report );
	});
/*
program
	.command('list')
	.description('list all of the existing templates')
	.action(function(){});*/

program
	.command('remove <name>')
	.description('remove an existing template')
	.action(function( name ){
		sketchplate.removeTemplate( config, name, function( err ){
			if( err ){
				console.log( err.message );
			} else {
				console.log('Template ',name,' has been deleted');
			}
		});
	});

program
	.command('set <name>')
	.usage('<name>')
	.description('set the default template, currently `'+config.template.yellow+'`')
	.action(function( name ){
		config.template = name;
		config.writeUserConfig();
	});


program.parse( process.argv );

//--list
if( program.list ){
	console.log("Sketchplate has the following templates installed:");
	getTemplateListing(function( err, templates ){
		templates.forEach(function( name, i ){
			console.log((i+1)+') '+name);
		});
	});
}


function getTemplateListing( next ){
	var dirs = [];
	//read the templatesPath
	fs.readdir( config.templatesPath, function( err, files ){
		//for every file get a stats, collect directories
		//pass down waterfall once directories are collected
		async.forEach( files, function( file, cb ){
			fs.stat( config.templatesPath+'/'+file, function( err, stats){
				if( !err && stats.isDirectory() ){
					dirs.push( file );
				}
				cb( err );
			});
		}, function( err ){
			//pass directories to next waterfall item
			next( err, dirs );
		});
	});
}