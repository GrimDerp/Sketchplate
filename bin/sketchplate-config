#!/usr/bin/env node
require('colors');
var program = require('commander'),
	async = require('async'),
	path = require('path'),
	fs = require('fs'),
	sketchplate = require('../lib/sketchplate'),
	hooks = require('../lib/hooks'),
	config = require('../lib/config').getUserConfig();




program
	.command('editor')
	.description('setup your editor, currently `'+config.editor.red+'`')
	.option('-i, --interactive','Set up your editor in interactive mode')
	.action(function( options ){
		if( options.interactive ){
			var list = [];
			for( var prop in config.editors ){
				list.push( prop );
			}
			program.choose( list, function( choice ){
				config.editor = list[choice];
				config.writeUserConfig(function( err ){
					if( err ) throw err;
					process.exit();
				});
			});
		}
	});

program
	.command('templates <path>')
	.description('change the directory of your templates, currently `'+config.templatesPath.red+'`')
	.action(function( pth ){
		config.templatesPath = path.resolve( pth );
		config.writeUserConfig(function( err ){
			if( err ) throw err;
			process.exit();
		});
	});

program
	.command('restore')
	.description('restore your config.json to the default settings')
	.action(function(){
		require('../lib/config').restoreUserConfig(function( err ){
			if ( err ){
				throw err;
			}
			console.log("Config restored to defaults");
		});
	});

program.option('-e, --edit', 'Edit config.json in your editor');

program.parse( process.argv );

if( program.edit || program.args.length === 0 ){
	hooks.openInEditor( config.editors[ config.editor ], require('../lib/config').userConfig, function( err ){

	});
}