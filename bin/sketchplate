#!/usr/bin/env node

//#Sketchplate
//##by [Kyle Phillips](http://hapticdata.com)
//
//		Usage: sketchplate [options] [command]
//
//		Commands:
//
//			new [options]
//			create a new project with sketchplate
//
//			fetch [options]
//			fetch copies of any missing resources for template
//
//			config [options]
//			set sketchplate configuration
//
//		Options:
//
//			-h, --help             output usage information
//			-V, --version          output the version number
//			-v, --verbose          Verbose
//			-o, --open [location]  Open [location] in editor

/*global __dirname, process*/
var program = require('commander'),
	path = require('path'),
	fs = require('fs'),
	sketchplate = require('../lib/sketchplate'),
	configLocation = path.normalize(__dirname+'/../config.js'),
	config;

(function initConfig(){
	var txt = fs.readFileSync( configLocation );
	config = eval( String(txt) );
	config.templateDirectory = path.normalize( __dirname +'/'+ config.templateDirectory );
}());


program.version('0.0.4');

//handle the `new` command
program
	.command('new')
	.description('create a new project with sketchplate')
	.option('-t, --template [template]', 'Create with [template] template', '')
	.option('-g, --gitinit', 'Initialize repo after creation', '')
	.option('-n, --npminstall', 'Run npm install on the new project', '')
	.option('-s, --skipeditor', 'Skip opening project in editor', '')
	.option('-b, --browse', 'Open project in file browser', '')
	.action(function( destination, options ){
		if( typeof destination !== 'string' ){
			//if its really the options object
			if( destination.template !== undefined ){
				options = destination;
			} else {
				options = {};
			}
			destination = '.';
		}
		//destination = program.args.shift() || '.';
		if( options.template ){
			config.template = options.template;
		}
		//create a sketchplate project
		var plate = sketchplate.create( config );
		plate.copyTemplate( destination, function (err, project){
			if( err ){
				console.log( err.message );
				return;
			}
			if ( options.gitinit ) project.initRepo();
			if( options.npminstall ) project.npmInstall();
			if ( !options.skipeditor ){
				project.openInEditor(function ( err ){
					if( err ){
						program.confirm([
							"Your project was created;\n",
							"but there was an error opening your editor. ",
							"Would you like to edit your config.js? "].join(''), function( yes ){
								if( yes ){
									require('../lib/hooks').openInFileBrowser( configLocation, function( err ){
										process.exit();
									});
								}
							});
					}
				});
			}
			if( options.browse )project.openInFileBrowser(function(){});
		});
	});

program
	.command('fetch')
	.description('fetch copies of any missing resources for template')
	.option('-a, --all', 'Fetch new copies of all resources for template')
	.option('-t, --template [template]', 'Fetch resources for [template]', undefined)
	.action(function( options ){
		if(options.template)config.template = options.template;
		var plate = sketchplate.create( config );
		if( options.all ){
			plate.fetchAllLibs(function(){
				//if( err ) throw err;
			});
		} else {
			//fetch only missing
			plate.fetchMissingLibs(function(){
				//if( err ) throw err;
			});
		}
	});

program
	.command('config')
	.description('set sketchplate configuration')
	.option('-t, --template [template]', 'Set default template [template]', undefined)
	.option('-d, --directory [directory]', 'Set the directory to find templates', undefined)
	.option('-e, --editor [editor]', 'Set the arguments for your editor', undefined)
	.action(function( options ){
		console.log('config args:', arguments);
		return;
		var body;
		if( options.template ) config.template = options.template;
		if( options.editor ) config.editorArgs = options.editor;
		if( options.directory ) config.templateDirectory = options.directory;
		if( !Array.isArray( config.editorArgs ) ){
			config.editorArgs = [config.editorArgs];
		}
		body = JSON.stringify( config, null, '\t');
		fs.writeFile(__dirname + '/../config.json', body, function( err ){
			if( err ) throw err;
		});
	});



program
	.option('-v, --verbose', 'Verbose', undefined)
	.option('-o, --open [location]', 'Open [location] in editor', undefined);


program.parse(process.argv);


/*

if( program.template !== '' ){
	settings.template = program.template;
}

settings.templateDirectory = settings.templateDirectory || __dirname + '/../templates/'+settings.template+'/';


if ( program.fetch ){
	sketchplate.fetchAllLibsFor( settings );
}

if( program['new'] !== undefined  && program['new'] !== ''){
	if( program['template'] !== undefined && program['template'] !== ''){
		console.log('set template: '+ program['template'] );
		settings.template = program['template'];
	}
	//create a sketchplate project
	var plate = sketchplate.create( settings );
	plate.copyTemplate( program['new'], function (err, project){
		if( err )throw Error(err);
		if ( program.gitinit ) project.initRepo();
		if ( !program.skipopen ){
			project.openInEditor(function (){
				//process.exit(0);
			});
		}
	});
}

if( program.open && program.open.length > 0 ){
	sketchplate.openProject(program.open, settings).openInEditor();
}
*/

