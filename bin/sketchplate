#!/usr/bin/env node

//#Sketchplate
//##by [Kyle Phillips](http://hapticdata.com)
//
//		Usage: sketchplate [options] [command]
//
//		Commands:
//
//			new [options]
//			create a new project with sketchplate
//
//			fetch [options]
//			fetch copies of any missing resources for template
//
//			config [options]
//			set sketchplate configuration
//
//		Options:
//
//			-h, --help             output usage information
//			-V, --version          output the version number
//			-v, --verbose          Verbose
//			-o, --open [location]  Open [location] in editor

var program = require('commander'),
	async = require('async'),
	path = require('path'),
	fs = require('fs'),
	sketchplate = require('../lib/sketchplate'),
	hooks = require('../lib/hooks'),
	spawn = require('win-spawn'),
	configLocation = '../config.json', //path.normalize(__dirname+'/../config.js'),
	config;

(function initConfig(){
	//var txt = fs.readFileSync( configLocation );
	//config = eval( String(txt) );
	config = require( configLocation );
	//config.templatesPath = path.normalize( __dirname +'/'+ config.templatesPath );
}());


//handle the `new` command
program
	.version(require('../package').version)
	.usage('<command> [options]');

program.on('--help', function(){
	var l = console.log;
	l('  Commands:');
	l('');
	l('    new [options] <location>');
	l('    create a new project at <location> with hooks for [options]');
	l();
	l('    fetch [options] [namesâ€¦]');
	l('    perform resource fetches on your templates');
	l();
	l('    template [options] [command]');
	l('    perform commands on your sketchplate templates');
	l();
	l('    config [options] [command]');
	l('    perform  hooks on existing projects');
	l();
	process.exit();
});

program.parse(process.argv);

// args void of cmd
var args = process.argv.slice(3);

// command
var cmd = program.args[0];
// display help
if (!cmd) {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
  process.exit();
}

var commands = {
	fetch: function(){
		cmd = 'template';
		args.unshift('fetch');
		spwn( cmd );
	},
	template: function(){
		spwn( cmd );
	},
	config: function(){
		spwn( cmd );
	}
};
commands['new'] = function(){
	spwn(cmd);
};

if( commands[cmd] ){
	commands[cmd]();
}

function spwn( cmd ){
	// executable
	var bin = 'sketchplate-' + cmd;
	// local
	var local = path.join(__dirname, bin);
	if (fs.existsSync(local)) bin = local;
	// spawn
	var proc = spawn(bin, args, { stdio: 'inherit', customFds: [0,1,2] });
}
