#!/usr/bin/env node

//#Sketchplate
//##by [Kyle Phillips](http://hapticdata.com)
//
//		Usage: sketchplate [options] [command]
//
//		Commands:
//
//			new [options]
//			create a new project with sketchplate
//
//			fetch [options]
//			fetch copies of any missing resources for template
//
//			config [options]
//			set sketchplate configuration
//
//		Options:
//
//			-h, --help             output usage information
//			-V, --version          output the version number
//			-v, --verbose          Verbose
//			-o, --open [location]  Open [location] in editor

var program = require('commander'),
	async = require('async'),
	path = require('path'),
	fs = require('fs'),
	sketchplate = require('../lib/sketchplate'),
	hooks = require('../lib/hooks'),
	configLocation = '../config.json', //path.normalize(__dirname+'/../config.js'),
	config;

(function initConfig(){
	//var txt = fs.readFileSync( configLocation );
	//config = eval( String(txt) );
	config = require( configLocation );
	//config.templatesPath = path.normalize( __dirname +'/'+ config.templatesPath );
}());


//handle the `new` command
program
	.version(require('../package').version)
	.usage('<command> [options]');

program.on('--help', function(){
	var l = console.log;
	l('  Commands:');
	l('');
	l('    new <location> [options]');
	l('    create a new project at <location> with hooks for [options]');
	l();
	l('    fetch [options...]');
	l('    perform resource fetches on your templates');
	l();
	l('    template <command> [options]');
	l('    perform commands on your sketchplate templates');
	l();
	l('    hooks <command> [options]');
	l('    perform  hooks on existing projects');
	l();
	process.exit();
});

program
	.command('new')
	.description('create a new project with sketchplate')
	.option('-t, --template [template]', 'Create with [template] template', '')
	.option('-g, --gitinit', 'Initialize repo after creation', '')
	.option('-n, --npminstall', 'Run npm install on the new project', '')
	.option('-s, --skipeditor', 'Skip opening project in editor', '')
	.option('-b, --browse', 'Open project in file browser', '')
	.action(function( destination, options ){
		if( typeof destination !== 'string' ){
			//if its really the options object
			if( destination.template !== undefined ){
				options = destination;
			} else {
				options = {};
			}
			destination = '.';
		}
		//destination = program.args.shift() || '.';
		if( options.template ){
			config.template = options.template;
		}
		//create a sketchplate project
		var plate = sketchplate.create( config );
		plate.copyTemplate( destination, function (err, project){
			if( err ){
				console.log( err.message );
				return;
			}
			if ( options.gitinit ) project.initRepo();
			if( options.npminstall ) project.npmInstall();
			if ( !options.skipeditor ){
				project.openInEditor(function ( err ){
					if( err ){
						program.confirm([
							"Your project was created; ",
							"but there was an error opening your editor.\n",
							"Would you like to edit your config.js? ",
							"(you can do this any time with \"sketchplate config\") "
						].join(''), function( yes ){
							if( yes ){
								hooks.openInFileBrowser( configLocation, function( err ){
									process.exit();
								});
							}
						});
					}
				});
			}
			if( options.browse )project.openInFileBrowser(function(){});
		});
	});

/*program
	.command('fetch')
	.description('fetch copies of any resources for a template')
	.option('-a, --all', 'Fetch new copies of all resources for template')
	.option('-i, --interactive', 'Fetch resources individually in interactive mode')
	.option('-t, --template [template]', 'Fetch resources for [template]', undefined)
	.action(function( options ){
		var plate = sketchplate.create( config );
		var report = function( err ){
			if( err ){
				console.log( err.message );
			} else {
				console.log("Fetched resources completed");
			}
			process.exit();
		};
		//if the argument was an options object
		if( arguments[0].commands ){
			if(options.template){
				config.template = options.template;
			}
			if( options.all ){
				options.interactive = false;
				plate.fetchAll( report );
			} else if( options.interactive ){
				var list = [];
				plate.resources.forEach(function( val ){
					list.push( val.id );
				});
				program.choose( list, function( index ){
					var resource = plate.resources[index];
					sketchplate.fetch( resource, report );
				});
			} else {
				//fetch only missing
				plate.fetchMissing( report );
			}
		} else {
			//if the arguments were individual resources to fetch
			var names = Array.prototype.slice.call( arguments, 0, arguments.length-1 );
			plate.fetch( names, function( err ){
				if( err ){
					console.log( 'sketchplate err: ',err );
				} else {
					console.log("Fetched resources completed");
				}
			});
		}
	});
*/
/*
program
	.command('template')
	.description('create, edit and browse templates')
	.option('-a, --add [add]', 'add a new template [add]', undefined)
	.option('-e, --edit [edit]', 'Edit the template [edit]', undefined)
	.option('-b, --browse [browse]', 'Open the templates directory', undefined)
	.action(function( options ){
		if( options.create && options.edit ){
			options.edit = false;
		}
		if( options.add ){
			console.log("Creating a new templateâ€¦");
			var msg = "Title: ";
			if( String(options.add) !== "true" ){
				msg += "("+options.add+") ";
			}
			program.prompt(msg, function( title ){
				if( title === "" ){
					title = options.add;
				}
				program.prompt("Description: ", function( description ){
					sketchplate.createTemplate( config, {
						title: title,
						description: description
					}, function( err, directory ){
						hooks.openInEditor( config.editorArgs, directory, function( err ){
							process.exit();
						});
					});
				});
			});
		}
		if( options.browse ){
			hooks.openInFileBrowser( config.templatesPath, function( err ){

			});
		}
		if( options.edit ){
			var tmplDir = config.templatesPath+'/'+options.edit;
			if( !fs.existsSync(tmplDir) ){
				console.log("The template "+options.edit+" does not exist");
				return;
			}
			hooks.openInEditor( config.editorArgs, tmplDir, function( err ){
				process.exit();
			});
		}
	});
*/



/*
program
	.option('-v, --verbose', 'Verbose', undefined)
	.option('-o, --open [location]', 'Open [location] in editor', undefined);
*/


program.parse(process.argv);

// args void of cmd
var args = process.argv.slice(3);

// command
var cmd = program.args[0];
// display help
if (!cmd) {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
  process.exit();
}

var commands = {
	fetch: function(){
		cmd = 'template';
		args.unshift('fetch');
		spwn( cmd );
	},
	template: function(){
		spwn( cmd );
	},
	config: function(){
		spwn( cmd );
	}
};

if( commands[cmd] ){
	commands[cmd]();
}

function spwn( cmd ){
	// executable
var bin = 'sketchplate-' + cmd;

// local
var local = path.join(__dirname, bin);
if (fs.existsSync(local)) bin = local;

// spawn
var proc = require('child_process').spawn(bin, args, { stdio: 'inherit' });
}
